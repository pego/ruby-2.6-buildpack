#!/bin/bash

# Exit on error
set -e
# Add verbose debugging
set -x

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Create cache directories if they don't exist
mkdir -p $CACHE_DIR/openssl
mkdir -p $CACHE_DIR/ruby
mkdir -p $BUILD_DIR/.heroku/ruby
mkdir -p $BUILD_DIR/bin
mkdir -p $BUILD_DIR/.profile.d

# Set environment variables
export LANG=en_US.UTF-8
export LIBRARY_PATH=$BUILD_DIR/.heroku/vendor/lib:$LIBRARY_PATH
export LD_LIBRARY_PATH=$BUILD_DIR/.heroku/vendor/lib:$LD_LIBRARY_PATH
export CPATH=$BUILD_DIR/.heroku/vendor/include:$CPATH
export CPPPATH=$BUILD_DIR/.heroku/vendor/include:$CPPPATH

# OpenSSL version to use
OPENSSL_VERSION="1.1.1w"

echo "-----> Preparing build environment"
# Heroku already has the necessary development tools and libraries installed
# We can't run apt-get in the Heroku build environment due to permission restrictions

echo "-----> Compiling OpenSSL ${OPENSSL_VERSION}"
mkdir -p $BUILD_DIR/.heroku/vendor

# Check if we have a cached copy
if [ ! -f "$CACHE_DIR/openssl/openssl-${OPENSSL_VERSION}.tar.gz" ]; then
  echo "       Downloading OpenSSL ${OPENSSL_VERSION}"
  curl -L "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz" -o "$CACHE_DIR/openssl/openssl-${OPENSSL_VERSION}.tar.gz"
fi

# Extract and compile OpenSSL
cd $BUILD_DIR
tar xzf "$CACHE_DIR/openssl/openssl-${OPENSSL_VERSION}.tar.gz"
cd "openssl-${OPENSSL_VERSION}"

echo "       Configuring OpenSSL ${OPENSSL_VERSION}"
./config --prefix=$BUILD_DIR/.heroku/vendor shared zlib -fPIC no-async
echo "       Building OpenSSL ${OPENSSL_VERSION}"
make -j4
echo "       Installing OpenSSL ${OPENSSL_VERSION}"
make install_sw

# Ruby version to use
RUBY_VERSION="2.6.10"

echo "-----> Compiling Ruby ${RUBY_VERSION}"

# Check if we have a cached copy
if [ ! -f "$CACHE_DIR/ruby/ruby-${RUBY_VERSION}.tar.gz" ]; then
  echo "       Downloading Ruby ${RUBY_VERSION}"
  curl -L "https://cache.ruby-lang.org/pub/ruby/2.6/ruby-${RUBY_VERSION}.tar.gz" -o "$CACHE_DIR/ruby/ruby-${RUBY_VERSION}.tar.gz"
fi

# Extract and compile Ruby
cd $BUILD_DIR
tar xzf "$CACHE_DIR/ruby/ruby-${RUBY_VERSION}.tar.gz"
cd "ruby-${RUBY_VERSION}"

echo "       Configuring Ruby ${RUBY_VERSION}"
./configure --prefix=$BUILD_DIR/.heroku/ruby \
  --with-openssl-dir=$BUILD_DIR/.heroku/vendor \
  --disable-install-doc \
  --enable-shared \
  --with-out-ext=tk,sdbm,gdbm,dbm \
  LDFLAGS="-Wl,-rpath,$BUILD_DIR/.heroku/vendor/lib -L$BUILD_DIR/.heroku/vendor/lib" \
  CPPFLAGS="-I$BUILD_DIR/.heroku/vendor/include"

echo "       Building Ruby ${RUBY_VERSION}"
make -j4
echo "       Installing Ruby ${RUBY_VERSION}"
make install

# Create wrapper scripts
echo "-----> Creating wrapper scripts"
cat > $BUILD_DIR/bin/ruby <<EOF
#!/bin/bash
export LD_LIBRARY_PATH=\$HOME/.heroku/vendor/lib:\$LD_LIBRARY_PATH
exec \$HOME/.heroku/ruby/bin/ruby "\$@"
EOF
chmod +x $BUILD_DIR/bin/ruby

cat > $BUILD_DIR/bin/gem <<EOF
#!/bin/bash
export LD_LIBRARY_PATH=\$HOME/.heroku/vendor/lib:\$LD_LIBRARY_PATH
exec \$HOME/.heroku/ruby/bin/gem "\$@"
EOF
chmod +x $BUILD_DIR/bin/gem

cat > $BUILD_DIR/bin/bundle <<EOF
#!/bin/bash
export LD_LIBRARY_PATH=\$HOME/.heroku/vendor/lib:\$LD_LIBRARY_PATH
exec \$HOME/.heroku/ruby/bin/bundle "\$@"
EOF
chmod +x $BUILD_DIR/bin/bundle

# Set up environment for runtime
echo "-----> Setting up runtime environment"
mkdir -p $BUILD_DIR/.profile.d
cat > $BUILD_DIR/.profile.d/ruby.sh <<EOF
#!/bin/bash
export PATH="\$HOME/bin:\$HOME/.heroku/ruby/bin:\$PATH"
export LD_LIBRARY_PATH="\$HOME/.heroku/vendor/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.heroku/vendor/lib:\$LIBRARY_PATH"
export CPATH="\$HOME/.heroku/vendor/include:\$CPATH"
export GEM_HOME="\$HOME/.gem/ruby/2.6.0"
export GEM_PATH="\$HOME/.heroku/ruby/lib/ruby/gems/2.6.0:\$HOME/.gem/ruby/2.6.0"
export SSL_CERT_DIR="/etc/ssl/certs"
export SSL_CERT_FILE="/etc/ssl/certs/ca-certificates.crt"
# Make openssl available at runtime
export OPENSSL_CONF="\$HOME/.heroku/vendor/ssl/openssl.cnf"
EOF
chmod +x $BUILD_DIR/.profile.d/ruby.sh

# Install Bundler
echo "-----> Installing Bundler"
$BUILD_DIR/.heroku/ruby/bin/gem install bundler --no-document

# Verify installation
echo "-----> Verifying installation"
$BUILD_DIR/.heroku/ruby/bin/ruby -v
$BUILD_DIR/.heroku/ruby/bin/ruby -ropenssl -e 'puts "OpenSSL version: #{OpenSSL::OPENSSL_VERSION}"'

# Clean up build artifacts to reduce slug size
echo "-----> Cleaning up build artifacts"
cd $BUILD_DIR
rm -rf "openssl-${OPENSSL_VERSION}"
rm -rf "ruby-${RUBY_VERSION}"

echo "-----> Ruby ${RUBY_VERSION} with OpenSSL ${OPENSSL_VERSION} installed successfully"