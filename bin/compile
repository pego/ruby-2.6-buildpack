#!/bin/bash

# Exit on error
set -e
# Add verbose debugging
set -x

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Create cache directories if they don't exist
mkdir -p $CACHE_DIR/openssl
mkdir -p $CACHE_DIR/ruby
mkdir -p $BUILD_DIR/.heroku/ruby
mkdir -p $BUILD_DIR/bin
mkdir -p $BUILD_DIR/.profile.d

# Set environment variables
export LANG=en_US.UTF-8
export LIBRARY_PATH=$BUILD_DIR/.heroku/vendor/lib:$LIBRARY_PATH
export LD_LIBRARY_PATH=$BUILD_DIR/.heroku/vendor/lib:$LD_LIBRARY_PATH
export CPATH=$BUILD_DIR/.heroku/vendor/include:$CPATH
export CPPPATH=$BUILD_DIR/.heroku/vendor/include:$CPPPATH

# OpenSSL version to use
OPENSSL_VERSION="1.1.1w"

echo "-----> Preparing build environment"
# Heroku already has the necessary development tools and libraries installed
# We can't run apt-get in the Heroku build environment due to permission restrictions

echo "-----> Compiling OpenSSL ${OPENSSL_VERSION}"
mkdir -p $BUILD_DIR/.heroku/vendor

# Check if we have a cached copy
if [ ! -f "$CACHE_DIR/openssl/openssl-${OPENSSL_VERSION}.tar.gz" ]; then
  echo "       Downloading OpenSSL ${OPENSSL_VERSION}"
  curl -L "https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz" -o "$CACHE_DIR/openssl/openssl-${OPENSSL_VERSION}.tar.gz"
fi

# Extract and compile OpenSSL
cd $BUILD_DIR
tar xzf "$CACHE_DIR/openssl/openssl-${OPENSSL_VERSION}.tar.gz"
cd "openssl-${OPENSSL_VERSION}"

echo "       Configuring OpenSSL ${OPENSSL_VERSION}"
./config --prefix=$BUILD_DIR/.heroku/vendor shared zlib -fPIC no-async
echo "       Building OpenSSL ${OPENSSL_VERSION}"
make -j4
echo "       Installing OpenSSL ${OPENSSL_VERSION}"
make install_sw

# Ruby version to use
RUBY_VERSION="2.6.10"

echo "-----> Compiling Ruby ${RUBY_VERSION}"

# Check if we have a cached copy
if [ ! -f "$CACHE_DIR/ruby/ruby-${RUBY_VERSION}.tar.gz" ]; then
  echo "       Downloading Ruby ${RUBY_VERSION}"
  curl -L "https://cache.ruby-lang.org/pub/ruby/2.6/ruby-${RUBY_VERSION}.tar.gz" -o "$CACHE_DIR/ruby/ruby-${RUBY_VERSION}.tar.gz"
fi

# Extract and compile Ruby
cd $BUILD_DIR
tar xzf "$CACHE_DIR/ruby/ruby-${RUBY_VERSION}.tar.gz"
cd "ruby-${RUBY_VERSION}"

echo "       Configuring Ruby ${RUBY_VERSION}"
./configure --prefix=$BUILD_DIR/.heroku/ruby \
  --with-openssl-dir=$BUILD_DIR/.heroku/vendor \
  --disable-install-doc \
  --enable-shared \
  --with-out-ext=tk,sdbm,gdbm,dbm \
  LDFLAGS="-Wl,-rpath,$BUILD_DIR/.heroku/vendor/lib -L$BUILD_DIR/.heroku/vendor/lib" \
  CPPFLAGS="-I$BUILD_DIR/.heroku/vendor/include"

echo "       Building Ruby ${RUBY_VERSION}"
make -j4
echo "       Installing Ruby ${RUBY_VERSION}"
make install

# Create wrapper scripts
echo "-----> Creating wrapper scripts"
mkdir -p $BUILD_DIR/bin

cat > $BUILD_DIR/bin/ruby <<RUBYEOF
#!/bin/bash
export LD_LIBRARY_PATH=\$HOME/.heroku/vendor/lib:\$LD_LIBRARY_PATH
exec \$HOME/.heroku/ruby/bin/ruby "\$@"
RUBYEOF
chmod +x $BUILD_DIR/bin/ruby

cat > $BUILD_DIR/bin/gem <<GEMEOF
#!/bin/bash
export LD_LIBRARY_PATH=\$HOME/.heroku/vendor/lib:\$LD_LIBRARY_PATH
exec \$HOME/.heroku/ruby/bin/gem "\$@"
GEMEOF
chmod +x $BUILD_DIR/bin/gem

cat > $BUILD_DIR/bin/bundle <<BUNDLEOF
#!/bin/bash
export LD_LIBRARY_PATH=\$HOME/.heroku/vendor/lib:\$LD_LIBRARY_PATH
exec \$HOME/.heroku/ruby/bin/bundle "\$@"
BUNDLEOF
chmod +x $BUILD_DIR/bin/bundle

# Set up environment for runtime
echo "-----> Setting up runtime environment"
mkdir -p $BUILD_DIR/.profile.d
cat > $BUILD_DIR/.profile.d/ruby.sh <<PROFILEEOF
#!/bin/bash
export PATH="\$HOME/bin:\$HOME/.heroku/ruby/bin:\$PATH"
# CRITICAL: Include Ruby lib directory for libruby.so
export LD_LIBRARY_PATH="\$HOME/.heroku/ruby/lib:\$HOME/.heroku/vendor/lib:\$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$HOME/.heroku/ruby/lib:\$HOME/.heroku/vendor/lib:\$LIBRARY_PATH"
export CPATH="\$HOME/.heroku/vendor/include:\$CPATH"
export GEM_HOME="\$HOME/.gem/ruby/2.6.0"
export GEM_PATH="\$HOME/.heroku/ruby/lib/ruby/gems/2.6.0:\$HOME/.gem/ruby/2.6.0"
export SSL_CERT_DIR="/etc/ssl/certs"
export SSL_CERT_FILE="/etc/ssl/certs/ca-certificates.crt"
# Make openssl available at runtime
export OPENSSL_CONF="\$HOME/.heroku/vendor/ssl/openssl.cnf"

# Print debug info for reference
echo "Ruby environment:"
echo "  LD_LIBRARY_PATH: \$LD_LIBRARY_PATH"
echo "  PATH: \$PATH"
echo "  GEM_PATH: \$GEM_PATH"
ls -la \$HOME/.heroku/ruby/lib/libruby* || echo "libruby not found in expected location!"
PROFILEEOF
chmod +x $BUILD_DIR/.profile.d/ruby.sh

# Install Bundler (compatible with Ruby 2.6)
echo "-----> Installing Bundler (compatible with Ruby 2.6)"
$BUILD_DIR/.heroku/ruby/bin/gem install bundler -v 2.3.26 --no-document

# Verify bundle executable exists
if [ ! -f "$BUILD_DIR/.heroku/ruby/bin/bundle" ]; then
  echo "-----> Creating bundle executable"
  ln -sf "$BUILD_DIR/.heroku/ruby/bin/bundler" "$BUILD_DIR/.heroku/ruby/bin/bundle"
fi

# Create wrappers for bundler
cat > $BUILD_DIR/bin/bundler <<'BUNDLEREOF'
#!/bin/bash
# Direct path to Bundler executable - use both build-time and runtime paths

# Debug - show what we're running
echo "Running bundler from $(dirname $0) with args: $@"
echo "PATH: $PATH"
echo "Current directory: $(pwd)"

# During build, we're in /tmp/build_xxx
if [[ "$PWD" == "/tmp/build_"* ]]; then
  # We're in build mode
  if [ -x "$PWD/.heroku/ruby/bin/bundler" ]; then
    export LD_LIBRARY_PATH="$PWD/.heroku/vendor/lib:$LD_LIBRARY_PATH"
    export GEM_PATH="$PWD/.heroku/ruby/lib/ruby/gems/2.6.0:$PWD/.gem/ruby/2.6.0"
    export PATH="$PWD/.heroku/ruby/bin:$PATH"
    exec "$PWD/.heroku/ruby/bin/bundler" "$@"
  fi
else
  # We're in runtime mode
  if [ -x "$HOME/.heroku/ruby/bin/bundler" ]; then
    export LD_LIBRARY_PATH="$HOME/.heroku/vendor/lib:$LD_LIBRARY_PATH"
    export GEM_PATH="$HOME/.heroku/ruby/lib/ruby/gems/2.6.0:$HOME/.gem/ruby/2.6.0"
    export PATH="$HOME/.heroku/ruby/bin:$PATH"
    exec "$HOME/.heroku/ruby/bin/bundler" "$@"
  fi
fi

# Use current directory (for both build and runtime)
if [ -x ".heroku/ruby/bin/bundler" ]; then
  export LD_LIBRARY_PATH=".heroku/vendor/lib:$LD_LIBRARY_PATH"
  export GEM_PATH=".heroku/ruby/lib/ruby/gems/2.6.0:.gem/ruby/2.6.0"
  export PATH=".heroku/ruby/bin:$PATH"
  exec ".heroku/ruby/bin/bundler" "$@"
fi

# Error - couldn't find bundler
echo "Error: Could not find bundler executable"
exit 1
BUNDLEREOF
chmod +x $BUILD_DIR/bin/bundler

cat > $BUILD_DIR/bin/bundle <<'BUNDLEEOF'
#!/bin/bash
# Simplified bundle wrapper that has robust error handling

# Debug - show what we're running
echo "Running bundle from $(dirname $0) with args: $@"
echo "PATH: $PATH"
echo "Current directory: $(pwd)"

# Set up environment
export LD_LIBRARY_PATH="$PWD/.heroku/vendor/lib:$LD_LIBRARY_PATH"
export GEM_PATH="$PWD/.heroku/ruby/lib/ruby/gems/2.6.0:$PWD/.gem/ruby/2.6.0"
export PATH="$PWD/.heroku/ruby/bin:$PATH"

# Look for bundler executable in Gem directory
BUNDLER_GEM_PATH=$(find $PWD/.heroku/ruby/lib/ruby/gems -name bundler -type f -executable -print 2>/dev/null | head -1 || echo "")
BUNDLE_GEM_PATH=$(find $PWD/.heroku/ruby/lib/ruby/gems -name bundle -type f -executable -print 2>/dev/null | head -1 || echo "")

# Directly run vendor bundle if available
if [ -x "$PWD/vendor/bundle/bin/bundle" ]; then
  echo "Using vendor bundle: $PWD/vendor/bundle/bin/bundle"
  exec "$PWD/vendor/bundle/bin/bundle" "$@"
# Try standard paths
elif [ -x "$PWD/.heroku/ruby/bin/bundle" ]; then
  echo "Using local bundle: $PWD/.heroku/ruby/bin/bundle"
  exec "$PWD/.heroku/ruby/bin/bundle" "$@"
elif [ -x "$PWD/.heroku/ruby/bin/bundler" ]; then
  echo "Using local bundler: $PWD/.heroku/ruby/bin/bundler"
  exec "$PWD/.heroku/ruby/bin/bundler" "$@"
# Try gem paths
elif [ -n "$BUNDLE_GEM_PATH" ]; then
  echo "Using gem bundle: $BUNDLE_GEM_PATH"
  exec "$BUNDLE_GEM_PATH" "$@"
elif [ -n "$BUNDLER_GEM_PATH" ]; then
  echo "Using gem bundler: $BUNDLER_GEM_PATH"
  exec "$BUNDLER_GEM_PATH" "$@"
# Try calling bundler directly if in PATH
elif command -v bundle >/dev/null 2>&1; then
  echo "Using bundle from PATH"
  exec bundle "$@"
elif command -v bundler >/dev/null 2>&1; then
  echo "Using bundler from PATH"
  exec bundler "$@"
# If all else fails, let's create a fake bundler that can at least handle 'exec'
else
  # If this is a simple exec command, we can try to run the command directly
  if [ "$1" = "exec" ]; then
    shift
    echo "*** WARNING: No bundler found, attempting to run command directly: $@"
    
    # Special case for puma
    if [ "$1" = "puma" ]; then
      shift
      echo "Detected puma command, searching for puma executable..."
      
      # Try to find puma in various locations
      if [ -x "$PWD/vendor/bundle/bin/puma" ]; then
        exec "$PWD/vendor/bundle/bin/puma" "$@"
      elif [ -x "$PWD/.heroku/ruby/bin/puma" ]; then
        exec "$PWD/.heroku/ruby/bin/puma" "$@"
      else
        # Search for puma in gem paths
        PUMA_PATH=$(find $PWD/.heroku/ruby -name puma -type f -executable -print 2>/dev/null | head -1)
        if [ -n "$PUMA_PATH" ]; then
          echo "Found puma at $PUMA_PATH"
          exec "$PUMA_PATH" "$@"
        fi
      fi
    fi
    
    exec "$@"
  else
    echo "Error: Could not find bundle or bundler. Checked:"
    echo "- $PWD/vendor/bundle/bin/bundle"
    echo "- $PWD/.heroku/ruby/bin/bundle"
    echo "- $PWD/.heroku/ruby/bin/bundler"
    echo "- Gem paths in $PWD/.heroku/ruby/lib/ruby/gems"
    echo "- system bundle and bundler in PATH"
    exit 1
  fi
fi
BUNDLEEOF
chmod +x $BUILD_DIR/bin/bundle

# Setup Rubygems to use installed bundler by default
mkdir -p $BUILD_DIR/.bundle
cat > $BUILD_DIR/.bundle/config <<BUNDLECONFIGEOF
---
BUNDLE_SILENCE_ROOT_WARNING: '1'
BUNDLE_BIN: vendor/bundle/bin
BUNDLE_PATH: vendor/bundle
BUNDLECONFIGEOF

echo "-----> Showing bundle location"
ls -la $BUILD_DIR/.heroku/ruby/bin/bundle* || echo "Bundle not found in expected location"
ls -la $BUILD_DIR/bin/bundle* || echo "Bundle wrappers not found"

# Verify installation
echo "-----> Verifying installation"
$BUILD_DIR/.heroku/ruby/bin/ruby -v
$BUILD_DIR/.heroku/ruby/bin/ruby -ropenssl -e 'puts "OpenSSL version: #{OpenSSL::OPENSSL_VERSION}"'

# Install gems for Rails app if there's a Gemfile
if [ -f "$BUILD_DIR/Gemfile" ]; then
  echo "-----> Installing dependencies with Bundler"
  cd $BUILD_DIR
  
  # First install critical gems directly
  echo "-----> Ensuring critical gems are installed"
  $BUILD_DIR/.heroku/ruby/bin/gem install bundler -v 2.3.26 --no-document
  $BUILD_DIR/.heroku/ruby/bin/gem install rake --no-document
  $BUILD_DIR/.heroku/ruby/bin/gem install rack --no-document
  $BUILD_DIR/.heroku/ruby/bin/gem install puma --no-document
  
  # Create direct reference to bundler for installation
  cat > $BUILD_DIR/bundler-install.sh <<'INSTALLEREOF'
#!/bin/bash
export LD_LIBRARY_PATH="$PWD/.heroku/vendor/lib:$LD_LIBRARY_PATH"
export GEM_PATH="$PWD/.heroku/ruby/lib/ruby/gems/2.6.0:$PWD/.gem/ruby/2.6.0"
export PATH="$PWD/.heroku/ruby/bin:$PATH"

# Show debug info
echo "Running bundler install from $PWD"
echo "PATH: $PATH"
echo "Checking for bundler binary:"
ls -la "$PWD/.heroku/ruby/bin/bundler" || echo "Bundler not found at expected location"

# Directly execute bundler
if [ -x "$PWD/.heroku/ruby/bin/bundler" ]; then
  "$PWD/.heroku/ruby/bin/bundler" install --without development:test --path vendor/bundle --binstubs vendor/bundle/bin
else
  echo "Bundler executable not found!"
  # Try to install gems directly
  echo "Attempting to install gems directly from Gemfile..."
  if [ -f Gemfile ]; then
    # Extract gem names from Gemfile and install them
    echo "Installing gems from Gemfile directly..."
    cat Gemfile | grep -E "^\s*gem\s+['\"]([^'\"]+)['\"]" | sed -E "s/^\s*gem\s+['\"]([^'\"]+)['\"](.*)/\1/g" | while read -r gem_name; do
      echo "Installing $gem_name directly..."
      "$PWD/.heroku/ruby/bin/gem" install "$gem_name" --no-document
    done
  else
    echo "No Gemfile found, cannot install gems"
    exit 1
  fi
fi
INSTALLEREOF
  chmod +x $BUILD_DIR/bundler-install.sh
  
  # Run the install script
  $BUILD_DIR/bundler-install.sh
  
  # Ensure proper permissions
  chmod -R +x $BUILD_DIR/vendor/bundle/bin || true
  
  # Create necessary Rails files if not present
  mkdir -p $BUILD_DIR/tmp/pids $BUILD_DIR/tmp/cache $BUILD_DIR/tmp/sockets $BUILD_DIR/log
  touch $BUILD_DIR/log/production.log
fi

# Create a direct puma launcher
echo "-----> Creating additional wrappers"
mkdir -p $BUILD_DIR/vendor/bundle/bin
cat > $BUILD_DIR/vendor/bundle/bin/puma <<'PUMAEOF'
#!/bin/bash
export LD_LIBRARY_PATH="$PWD/.heroku/vendor/lib:$LD_LIBRARY_PATH"
export GEM_PATH="$PWD/.heroku/ruby/lib/ruby/gems/2.6.0:$PWD/.gem/ruby/2.6.0"
export PATH="$PWD/.heroku/ruby/bin:$PATH"

# Look for puma executable
if [ -x "$PWD/vendor/bundle/bin/puma.ruby" ]; then
  exec "$PWD/vendor/bundle/bin/puma.ruby" "$@"
else
  # Try to find puma in gem paths
  PUMA_PATH=$(find $PWD/.heroku/ruby -name puma -type f -executable -print 2>/dev/null | head -1 || echo "")
  if [ -n "$PUMA_PATH" ]; then
    exec "$PUMA_PATH" "$@"
  elif command -v puma >/dev/null 2>&1; then
    exec puma "$@"
  else
    echo "Error: Could not find puma"
    exit 1
  fi
fi
PUMAEOF
chmod +x $BUILD_DIR/vendor/bundle/bin/puma

# Install essential gems including webrick (not included in Ruby 3.0+)
echo "-----> Installing essential gems"
cd $BUILD_DIR
$BUILD_DIR/.heroku/ruby/bin/gem install webrick --no-document
$BUILD_DIR/.heroku/ruby/bin/gem install puma --no-document
$BUILD_DIR/.heroku/ruby/bin/gem install rack --no-document

# Install rackup
echo "-----> Installing rackup"
$BUILD_DIR/.heroku/ruby/bin/gem install rackup --no-document

# Create basic server script as a Ruby file
cat > $BUILD_DIR/simple_server.rb <<'SERVEREOF'
# Simple HTTP server using Ruby's built-in webrick library
require 'webrick'

# Create a server on the PORT environment variable (default to 5000)
port = ENV['PORT'] || 5000
puts "Starting server on port #{port}"

# Create a basic HTTP server
server = WEBrick::HTTPServer.new(
  :Port => port.to_i,
  :DocumentRoot => '.'
)

# Add a handler for the root path
server.mount_proc '/' do |req, res|
  res.body = "Hello from Ruby #{RUBY_VERSION}! The server is working."
  res.content_type = 'text/html'
  puts "Handled request: #{req.path}"
end

# Add handlers for other paths for debugging
server.mount_proc '/info' do |req, res|
  res.body = "<pre>Ruby version: #{RUBY_VERSION}\n"
  res.body += "Gems: #{Gem.loaded_specs.keys.join(', ')}\n"
  res.body += "ENV: #{ENV.inspect}</pre>"
  res.content_type = 'text/html'
end

# Graceful shutdown
trap('INT') { server.shutdown }
trap('TERM') { server.shutdown }

# Start the server
puts "Server is ready to accept connections"
server.start
SERVEREOF

# Update the release script to use our wrapper
cat > $BUILD_DIR/run-server.sh <<'RUNEOF'
#!/bin/bash
# Simple server startup script

# Essential environment variables
export RUBYOPT="-W0"  # Suppress warnings
export RUBYLIB="$PWD/.heroku/ruby/lib/ruby/2.6.0:$PWD/.heroku/ruby/lib/ruby/2.6.0/x86_64-linux"
export LD_LIBRARY_PATH="$PWD/.heroku/ruby/lib:$PWD/.heroku/vendor/lib:$LD_LIBRARY_PATH"
export GEM_PATH="$PWD/.heroku/ruby/lib/ruby/gems/2.6.0:$PWD/.gem/ruby/2.6.0"
export GEM_HOME="$PWD/.gem/ruby/2.6.0"
export PATH="$PWD/.heroku/ruby/bin:$PATH"
export RUBY_COMPAT_VERSION="2.6.0"

# Debug info
echo "Ruby environment debug info:"
echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
echo "GEM_PATH: $GEM_PATH"
echo "GEM_HOME: $GEM_HOME"
echo "RUBYLIB: $RUBYLIB"

# Try to run the main application
if [ -f "$PWD/config.ru" ]; then
  echo "Found config.ru, attempting to start the application"
  
  # Check if we have rackup
  if [ -x "$PWD/.heroku/ruby/bin/rackup" ]; then
    # Try to run rackup directly
    echo "Using rackup to start the application"
    exec "$PWD/.heroku/ruby/bin/rackup" -p "${PORT:-5000}" -E production -o 0.0.0.0
  else
    # Try using Puma directly
    if [ -x "$PWD/vendor/bundle/bin/puma" ]; then
      echo "Using puma to start the application"
      exec "$PWD/vendor/bundle/bin/puma" -p "${PORT:-5000}" -C "$PWD/config/puma.rb"
    fi
  fi
fi

# If we get here, fall back to the simple server
echo "Starting simple webrick server"
exec "$PWD/.heroku/ruby/bin/ruby" "$PWD/simple_server.rb"
RUNEOF
chmod +x $BUILD_DIR/run-server.sh
chmod +x $BUILD_DIR/run-puma.sh

# Clean up build artifacts to reduce slug size
echo "-----> Cleaning up build artifacts"
cd $BUILD_DIR
rm -rf "openssl-${OPENSSL_VERSION}"
rm -rf "ruby-${RUBY_VERSION}"
rm -f bundler-install.sh

echo "-----> Ruby ${RUBY_VERSION} with OpenSSL ${OPENSSL_VERSION} installed successfully"